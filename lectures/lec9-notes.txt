WAKE UP BOX AND SLATE
prevent-shutdown on each
-------------------------------------------------------------------------------
Shell scripting demo
-------------------------------------------------------------------------------
SWITCH TO BASH

Goal: plot timing results from batch of runs

- Simple listing script
- #!, executable flag

- Comments in scripts
- output redirection of simple script
  ---> REALIZE: Interactive shell and script use same set of commands

- subshells

- try and plot
- (yes, we can make gnuplot understand this data, but-->not the point)

- use variable I, and variable substitution
  ---> RELATIONSHIP to env vars: export!
- semicolons for command separation

- outside script: file redirection, read 
  ---> PIPES DO NOT WORK, USE TEMP FILE

- while loops for parsing, exit status

- for loop for generation

- command substitution, backticks, $()
- seq START STEP STOP
- word separation

- if, test
  (if data file already exists)

- arithmetic

- for entertainment: fit a parabola

- set -x
- set -e

-------------------------------------------------------------------------------
CL vector demo
-------------------------------------------------------------------------------
- run
- develop vectorized version with float4 pointers
- bare memory-bound: not that impressive
- sin(): very impressive ! -> single thread
- variable sizing
- literals
- accessing individual components
- swizzling
- select() -> vectorized if

- WARNING about vload/vstore--develop variant
  vload(i, ary) for *unaligned* loads
  vstore(val, i, ary)
-------------------------------------------------------------------------------
Register spill demo
-------------------------------------------------------------------------------
- show (small-working-set) code
- discuss code--made to have growable working set
- show assembly
- grow the working set
- make
- show assembly, show spills
-------------------------------------------------------------------------------
Pointer aliasing demo
-------------------------------------------------------------------------------
- show code
- have them guess: does a[i] get reused?
- make
- disassemble
- add *restrict
- make
- disassemble
- Fortran faster than C?
-------------------------------------------------------------------------------
Alignment demo
-------------------------------------------------------------------------------
On crunchy3:
- show code
- run
- misalign
- run
-------------------------------------------------------------------------------
False sharing demo
-------------------------------------------------------------------------------
ON SLATE:
- set-governor
- show code
- ./run-threads-vs-cache
- why?!
- fix it
- rerun
- "false sharing"
-------------------------------------------------------------------------------
NUMA Demo
-------------------------------------------------------------------------------
ON CRUNCHY3:
- show code
- have to pin thread -> core
  - OTHERWISE NOTHING MAKES ANY SENSE
- have to make sure memory is on determined node
  - alternative: "first touch"

- re
- ./make-on-crunchy
- show results
- discuss locality matrix
- single bw: NU for real
- contention
  - compare to zero contention case: that's like single-local
- all-contention
- two-contention
-------------------------------------------------------------------------------
Lock contention demo
-------------------------------------------------------------------------------
- set-governor
- Run with a single thread
- Put rate into perspective with sin() -- remove
- Run with 1,2,3,4,5,...,all threads
-------------------------------------------------------------------------------
GPU Branching Demo
-------------------------------------------------------------------------------
BOX
- show code
- run with 32
- run with 16 (just comment out cases)
- comment on how implemented
- run with 8
- ...
- run with 1
-------------------------------------------------------------------------------
GPU latency demo
-------------------------------------------------------------------------------
BOX:
- show code
- shrink work group size
- EXPLANATION: less latency hiding
- Use 2x ILP
  - halve size
  - halve chunksize
  - add extra fetch/store
- Use 4x ILP
-------------------------------------------------------------------------------
Arch understanding demo
-------------------------------------------------------------------------------
- What the hell is a warp?
- Why is the size of the register file given in kiB?

- mem bw
  bus bits * bus clock /1e3 / 8

-  flops per core, per clock
  fpus * 2

- flop rate [gflops]
  cores * core clock * fpus * 2 * 1e6 / 1e9

- how many scheduling slots per core?
  warp size * (# warps/core)

- how many scheduling slots total?
  * cores
  -> and that's just what the hardware does!

- how much register file per work item?
  -> "I'm going to make a mistake."
  reg file * 1024 / # fpus

  correct:
  reg file * 1024 / # work items

- smem bw / WHAT?
  -> FLOP!

  lmem bw / (#fpus * 2)

- gmem bw / flop?

  (gmem bw *1e9) / (#cores) / (core clock *1e6) / (#fpus * 2)
-------------------------------------------------------------------------------
Occupancy calculator demo
-------------------------------------------------------------------------------
Use gnumeric
- grow work group size up to 256
- observe: occupancy increases
- then increase lmem to 16384
- observe: occupancy drops

- Is occupancy absolutely necessary?
  (No. ILP can be just as good. But you pay with space in the reg.file.)
